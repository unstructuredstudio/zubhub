# Generated by Django 3.2 on 2022-03-03 04:13

from django.db import migrations

def apply(apps, schema_editor):
    """
    Create Initial CreatorTags' and assign to corrensponding role fields (now tags)

    In this data migration, 
    * we populate the newly created CreatorTag model.
    * Read the content of role field on each Creator model instance and use 
    the info the select the corresponding CreatorTag model instance.
    * Add the selected CreatorTag model instance to the Creator model instance's 
    tags manytomanyfield.
    """
    Creator = apps.get_model("creators", "Creator")
    CreatorTag = apps.get_model("creators", "CreatorTag")

    tags_array = []
    
    for tag in ["creator", "moderator", "staff", "group"]:
        instance, _ = CreatorTag.objects.get_or_create(name=tag)
        tags_array.append(instance)

    for creator in Creator.objects.all():
        if type(creator.role) == int:
            creator.tags.add(tags_array[creator.role - 1])


def reverse(apps, schema_editor):
    """
    Clear Creator instance.tags many-to-many field and delete all CreatorTags
    """

    Creator = apps.get_model("creators", "Creator")
    CreatorTag = apps.get_model("creators", "CreatorTag")

    for creator in Creator.objects.all():
        creator.tags.clear()
    
    for tag in CreatorTag.objects.all():
        tag.delete()




class Migration(migrations.Migration):

    dependencies = [
        ('creators', '0002_alter_creator_first_name_squashed_0004_auto_20220303_0220'),
    ]

    operations = [
        migrations.RunPython(apply, reverse)
    ]

